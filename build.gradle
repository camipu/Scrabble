plugins {
    id 'java'
    id 'application'
}

group = 'edu.upc.prop.clusterxx'

ext {
    javaMainClass = 'edu.upc.prop.clusterxx.Main'
}

application {
    mainClassName = javaMainClass
}

jar {
    manifest {
        attributes 'Main-Class': javaMainClass
    }
}

task jarProvaParida(type: Jar) {
    archiveBaseName.set('ProvaParida')
    manifest {
        attributes 'Main-Class': 'edu.upc.prop.clusterxx.ProvaDriverParida'
    }
    from sourceSets.main.output
    dependsOn classes
}
build.dependsOn jarProvaParida

task jarProvaIni(type: Jar) {
    archiveBaseName.set('ProvaIni')
    manifest {
        attributes 'Main-Class': 'edu.upc.prop.clusterxx.DriverCamilaInicialiarPartida'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}
build.dependsOn jarProvaIni

task jarDriverToni(type: Jar) {
    archiveBaseName.set('DriverToni')
    manifest {
        attributes 'Main-Class': 'edu.upc.prop.clusterxx.DriverToni'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}
build.dependsOn jarDriverToni

task jarDriverEstadistica(type: Jar) {
    archiveBaseName.set('DriverEstadistica')
    manifest {
        attributes 'Main-Class': 'edu.upc.prop.clusterxx.DriverEstadistica'
    }
    from sourceSets.main.output
    dependsOn classes
}
build.dependsOn jarDriverEstadistica

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}
test {
    useJUnit() // Esto indica a Gradle que ejecute las pruebas con JUnit 4
}


repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:33.0.0-jre' // or latest stable version
    implementation 'com.google.code.gson:gson:2.8.9'
    testImplementation('junit:junit:4.13.1')
    testImplementation 'org.mockito:mockito-core:4.8.1'
    implementation 'com.google.guava:guava:32.1.2-jre'
}



tasks.named('run') {
    standardInput = System.in
}



